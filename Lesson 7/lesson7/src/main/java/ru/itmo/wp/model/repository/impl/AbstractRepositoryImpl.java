package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.wrapper.WrapAble;
import ru.itmo.wp.model.repository.wrapper.Wrapper;

import javax.sql.DataSource;
import java.sql.*;
import java.util.*;
import java.util.stream.Collectors;

public abstract class AbstractRepositoryImpl<T extends WrapAble> {
    protected final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    protected abstract String getTableName();

    protected abstract Wrapper<T> getElementWrapper();

    public T findById(long id) {
        return findByAllArguments(new String[]{"id"}, new Object[]{id});
    }

    public List<T> findAll() {
        return findAllByArguments(new String[0], new Object[0]);
    }

    protected T findByAllArguments(String[] argumentNames, Object[] argumentValues) {
        List<T> allByArguments = findAllByArguments(argumentNames, argumentValues);
        if (allByArguments.isEmpty()) {
            return null;
        } else {
            return allByArguments.get(0);
        }
    }

    public int findCount() {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement preparedStatement = connection.prepareStatement("SELECT COUNT(*) FROM " + getTableName())) {
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    resultSet.next();
                    return resultSet.getInt(1);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't count elements in Data Base " + getTableName(), e);
        }
    }

    protected List<T> findAllByArguments(String[] argumentNames, Object[] argumentValues) {
        return findAllByArguments(argumentNames, argumentValues, null);
    }

    protected List<T> findAllByArguments(String[] argumentNames, Object[] argumentValues, String orderedBy) {
        String condition = "true";
        if (argumentNames.length > 0) {
            condition = Arrays.stream(argumentNames)
                    .map(e -> e + "=?")
                    .collect(Collectors.joining(" AND "));
        }
        orderedBy = Objects.requireNonNullElse(orderedBy, "id");

        String sqlRequest = String.format("SELECT * FROM %s WHERE %s ORDER BY %s DESC", getTableName(), condition, orderedBy);
        System.out.println(sqlRequest);

        List<T> elements = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(sqlRequest)) {
                for (int i = 0; i < argumentNames.length; i++) {
                    statement.setObject(i + 1, argumentValues[i]);
                }
                try (ResultSet resultSet = statement.executeQuery()) {
                    T element;
                    while ((element = getElementWrapper().wrap(statement.getMetaData(), resultSet)) != null) {
                        elements.add(element);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find element in Data Base " + getTableName(), e);
        }

        return elements;
    }

    public T save(T element) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            Map<String, Object> unwrapFields = element.unwrap();
            try (PreparedStatement statement = connection.prepareStatement(getSaveSqlRequest(unwrapFields.keySet()), Statement.RETURN_GENERATED_KEYS)) {
                int index = 1;
                for (Object value : unwrapFields.values()) {
                    statement.setObject(index++, value);
                }
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save element.");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        long id = generatedKeys.getLong(1);
                        element.setId(id);
                        element.setCreationTime(this.findById(id).getCreationTime());
                        return element;
                    } else {
                        throw new RepositoryException("Can't save element [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save element.", e);
        }
    }

    public T update(T element) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            Map<String, Object> unwrapFields = element.unwrap();
            try (PreparedStatement statement = connection.prepareStatement(getUpdateSqlRequest(unwrapFields.keySet()), Statement.RETURN_GENERATED_KEYS)) {
                int index = 1;
                for (Object value : unwrapFields.values()) {
                    statement.setObject(index++, value);
                }
                statement.setLong(index, element.getId());
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't update element.");
                } else {
                    return element;
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't update element.", e);
        }
    }

    protected String getUpdateSqlRequest(Collection<String> unwrapFields) {
        String fields = unwrapFields.stream().map(e -> e + "=?").collect(Collectors.joining(","));
        return String.format("UPDATE `%s` SET %s WHERE id=?", getTableName(), fields);
    }

    protected String getSaveSqlRequest(Collection<String> unwrapFields) {
        String fields = unwrapFields.stream().map(e -> '`' + e + '`').collect(Collectors.joining(", "));
        String valuesSql = String.join(", ", Collections.nCopies(unwrapFields.size(), "?"));
        return String.format("INSERT INTO `%s` (%s, `creationTime`) VALUES (%s, NOW())", getTableName(), fields, valuesSql);
    }
}
