package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.domain.Talk;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.TalkRepository;
import ru.itmo.wp.model.repository.wrapper.TalkWrapper;
import ru.itmo.wp.model.repository.wrapper.Wrapper;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class TalkRepositoryImpl extends AbstractRepositoryImpl<Talk> implements TalkRepository {
    private final Wrapper<Talk> talkWrapper = new TalkWrapper();
    private final String DATA_BASE_NAME = "Talk";

    @Override
    protected String getDataBaseName() {
        return DATA_BASE_NAME;
    }

    @Override
    protected Wrapper<Talk> getElementWrapper() {
        return talkWrapper;
    }

    @Override
    public List<Talk> findAllRelatedByUserId(long id) {
        List<Talk> elements = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM " + DATA_BASE_NAME + " WHERE (sourceUserId=? OR targetUserId=?) ORDER BY creationTime")) {
                statement.setLong(1, id);
                statement.setLong(2, id);
                try (ResultSet resultSet = statement.executeQuery()) {
                    Talk element;
                    while ((element = getElementWrapper().wrap(statement.getMetaData(), resultSet)) != null) {
                        elements.add(element);
                    }
                    return elements;
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find element in Data Base " + getDataBaseName(), e);
        }
    }

    @Override
    public Talk save(Talk element) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("INSERT INTO `" + DATA_BASE_NAME + "` (`sourceUserId`, `targetUserId`, `text`, `creationTime`) VALUES (?, ?, ?, NOW())", Statement.RETURN_GENERATED_KEYS)) {
                statement.setLong(1, element.getSourceUserId());
                statement.setLong(2, element.getTargetUserId());
                statement.setString(3, element.getText());
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save Talk.");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        element.setId(generatedKeys.getLong(1));
                        element.setCreationTime(this.findById(element.getId()).getCreationTime());
                        return element;
                    } else {
                        throw new RepositoryException("Can't save Talk [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save Event.", e);
        }
    }
}
