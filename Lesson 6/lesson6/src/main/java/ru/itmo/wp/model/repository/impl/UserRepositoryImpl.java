package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.domain.User;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.UserRepository;
import ru.itmo.wp.model.repository.wrapper.UserWrapper;
import ru.itmo.wp.model.repository.wrapper.Wrapper;

import java.sql.*;
import java.util.List;

public class UserRepositoryImpl extends AbstractRepositoryImpl<User> implements UserRepository {
    private final Wrapper<User> userWrapper = new UserWrapper();
    private final String DATA_BASE_NAME = "User";

    @Override
    protected String getDataBaseName() {
        return DATA_BASE_NAME;
    }

    @Override
    protected Wrapper<User> getElementWrapper() {
        return userWrapper;
    }

    @Override
    public User findByLogin(String login) {
        return findByAllArguments(new String[]{"login"}, new Object[]{login});
    }

    @Override
    public User findByEmail(String email) {
        return findByAllArguments(new String[]{"email"}, new Object[]{email});
    }

    @Override
    public User findByLoginOrEmailAndPasswordSha(String token, String passwordSha) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM " + DATA_BASE_NAME + " WHERE (login=? OR email=?) AND passwordSha=?")) {
                statement.setString(1, token);
                statement.setString(2, token);
                statement.setString(3, passwordSha);
                try (ResultSet resultSet = statement.executeQuery()) {
                    return userWrapper.wrap(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find User.", e);
        }
    }

    @Override
    public User save(User element) {
        throw new RepositoryException("Saving user without password is unsupported operation");
    }

    public User save(User user, String passwordSha) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            String sqlRequest = getSaveSqlRequest(List.of("login", "email", "passwordSha"));
            try (PreparedStatement statement = connection.prepareStatement(sqlRequest, Statement.RETURN_GENERATED_KEYS)) {
                statement.setString(1, user.getLogin());
                statement.setString(2, user.getEmail());
                statement.setString(3, passwordSha);
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save User.");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        user.setId(generatedKeys.getLong(1));
                        user.setCreationTime(this.findById(user.getId()).getCreationTime());
                        return user;
                    } else {
                        throw new RepositoryException("Can't save User [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save User.", e);
        }
    }
}
