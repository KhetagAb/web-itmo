package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.domain.Event;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.EventRepository;
import ru.itmo.wp.model.repository.wrapper.EventWrapper;
import ru.itmo.wp.model.repository.wrapper.Wrapper;

import java.sql.*;

public class EventRepositoryImpl extends AbstractRepositoryImpl<Event> implements EventRepository {
    private final Wrapper<Event> eventWrapper = new EventWrapper();
    private final String DATA_BASE_NAME = "Event";

    @Override
    protected String getDataBaseName() {
        return DATA_BASE_NAME;
    }

    @Override
    protected Wrapper<Event> getElementWrapper() {
        return eventWrapper;
    }

    @Override
    public Event save(Event element) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("INSERT INTO `" + DATA_BASE_NAME + "` (`userId`, `type`, `creationTime`) VALUES (?, ?, NOW())", Statement.RETURN_GENERATED_KEYS)) {
                statement.setLong(1, element.getUserId());
                statement.setString(2, element.getType().getDB_NAME());
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save Event.");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        element.setId(generatedKeys.getLong(1));
                        element.setCreationTime(this.findById(element.getId()).getCreationTime());
                        return element;
                    } else {
                        throw new RepositoryException("Can't save Event [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save Event.", e);
        }
    }
}
